#!/bin/bash

show() {
    echo
    echo "***"
    echo "*** $@"
    echo "***"
    echo
}

if [[ $EUID -ne 0 ]]; then
   show "This script must be run as root"
   exit 1
fi

declare -r REAL_USER=$(who | head -n 1 | awk '{ print $1 }')

if grep -q 'ubuntu' /etc/os-release; then
    update_pkgs='apt-get update'
    upgrade_pkgs='apt-get upgrade -y'
    pkg_list='pkg_list_ubuntu[@]'
    install_pkgs='apt-get install -y'
    clean_pkgs='apt-get autoremove -y'
else
    echo "Error: I don't think you're running Ubuntu and I only know how to initialize that system." >&2
    exit 1
fi

show "Updating Package Lists..."
eval "$update_pkgs"
show "Done."
show "Upgrading Existing Packages..."
eval "$upgrade_pkgs"
show "Done."

show "Installing Packages..."

pkg_list_ubuntu=(
    aptitude
    autoconf
    autotools-dev
    bison
    build-essential
    cmake
    curl
    ddd
    docker.io
    dos2unix
    exuberant-ctags
    gawk
    htop
    indent
    libssl-dev
    nasm
    net-tools
    ninja-build
    openjdk-8-jdk
    openjdk-8-jdk-headless
    openssh-server
    python3-pip
    python-pip
    p7zip-full
    pv
    shellcheck
    tree
    uuid
    uuid-dev
    valgrind
    vim
    virtualenv
)

eval "$install_pkgs ${!pkg_list}"
show "Done."

show "Cleaning up unused packages..."
eval "$clean_pkgs"
show "Done."

show "Allowing no password when using sudo..."
sed -i 's/^%sudo.*/%sudo ALL=NOPASSWD: ALL/' /etc/sudoers
show "Done."

show "Setting up Docker..."
show "Adding user '$REAL_USER' to docker group..."
if groups "$REAL_USER" | grep -q 'docker'; then
    show "User '$REAL_USER' is already a member of the docker group. Skipping!"
else
    usermod -a -G docker "$REAL_USER"
fi
show "Done."

show "Sanity checking docker AS '$REAL_USER' via docker.io..."
# We are running as root but we want to try
#   running docker as the user who used sudo
if ! su -c 'docker run hello-world' "$REAL_USER"; then
    show "ERROR! Docker is misconfigured. Please contact a human for help."
    exit 1
fi
show "Done."

show "Installing default vimrc..."
if [ -e "/home/$REAL_USER/.vimrc" ]; then 
    show 'Already installed. Skipping...'
else
    echo 'set background=dark
set nocompatible        " use vim extensions
" Bells
set visualbell t_vb=    " turn off error beep/flash
set novisualbell        " turn off visual bell
" Editing info
set number              "[same as nu] show line numbers
set ruler               "[same as ru] show cursor position
set showmode            "[same as smd] show when in insert mode
" Search
set hlsearch            " highlight searches
"set incsearch           " do incremental searching
" Auxilary files
set nobackup            " do not keep a backup file (ending in ~)
set noswapfile          " do not write a swap file
" Smart editing
set showmatch           "[same as sm] highlight matching (), {}, etc.
"set nowrap              " do not wrap lines
" Tabs and Indenting
set autoindent          "[same as ai] always set autoindenting on
set shiftwidth=4        "[same as sw] number of spaces to (auto)indent
set tabstop=4           "[same as ts] number of spaces per tab
set expandtab           "[same as et] use spaces instead of a tab
set softtabstop=4       "[same as sts] number of spaces to use instead of a tab
set smarttab            "[same as sta] <BS> deletes shiftwidth spaces from the start of a line
" Syntax highlighting
syntax enable 
autocmd FileType make setlocal noexpandtab
set tags=./tags,tags;
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
noremap <F5> :set list!<CR>
noremap <F6> :set number!<CR>
noremap <F7> :set paste!<CR>' > "/home/$REAL_USER/.vimrc"
chown $REAL_USER:$REAL_USER /home/$REAL_USER/.vimrc
fi

show "Installing Python3 pacakges..."
pip3 install meson conan
show "Done."

echo "PS1='\w$ '" >> "/home/$REAL_USER/.bashrc"
echo '[user]
name = Pete Dietl
email = petedietl@gmail.com' > $HOME/.gitconfig

chown $REAL_USER:$REAL_USER $HOME/.gitconfig

show "Now log out and log back in; maybe you'll have to restart"
